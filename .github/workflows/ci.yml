name: CI

on:
  pull_request:
    branches:
      - "**"
  push:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest
    environment:
      name: test
    services:
      localstack:
        image: localstack/localstack:latest
        ports:
          - 4566:4566
        env:
          SERVICES: dynamodb
          DEBUG: 1
          DATA_DIR: /tmp/localstack/data
          HEALTHCHECK_CMD: awslocal dynamodb list-tables
          HEALTHCHECK_INTERVAL: 10s
          HEALTHCHECK_TIMEOUT: 5s
          HEALTHCHECK_RETRIES: 5

    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r lambda/requirements.txt
          pip install pytest moto

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id test
          aws configure set aws_secret_access_key test
          aws configure set aws_region ap-northeast-1
          aws configure set default.region us-east-1
          aws configure set default.output json

      - name: Create DynamoDB table
        run: |
          aws dynamodb create-table \
            --endpoint-url http://localhost:4566 \
            --table-name birthdays \
            --attribute-definitions AttributeName=id,AttributeType=S \
            --key-schema AttributeName=id,KeyType=HASH \
            --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5

      - name: Run tests
        env:
          DYNAMODB_TABLE: birthdays
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: |
          PYTHONPATH=$PYTHONPATH:$(pwd)/lambda pytest lambda/tests/test_lambda_function.py -v

      - name: Set output
        id: set-output
        run: echo "pytest_status=success" >> $GITHUB_OUTPUT

  terraform_plan:
    needs: test
    environment:
      name: prod
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: "1.5.7"
      - name: Terraform Init
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: terraform init
      - name: Zip the code
        working-directory: lambda
        run: sh make_zip.sh
      - name: Terraform Plan
        env:
          TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          TF_VAR_aws_region: ${{ vars.AWS_REGION }}
          TF_VAR_lambda_role_arn: ${{ secrets.LAMBDA_ROLE_ARN }}
          TF_VAR_scheduler_role_arn: ${{ secrets.SCHEDULER_ROLE_ARN }}
          TF_VAR_discord_webhook_url: ${{ secrets.DISCORD_WEBHOOK_URL }}
        run: terraform plan
